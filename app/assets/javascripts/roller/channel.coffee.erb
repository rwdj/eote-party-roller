# Impliments the broadcast receiver (channel) for ActionCable
#
#= require ./lib/struct/templates
#= require ./lib/result_handler
#= require ./lib/result_notification_handler

App = @App

App.rolls = App.cable.subscriptions.create 'RollsChannel', {
  MAX_INDEX_ROLLS: 50

  received: (data) ->
    @_insertEmptyRoll(data)
    @_insertRollResult(data)
    window.ResultNotificationHandler.send(data)
    @_popRoll()

  _insertRollResult: (data) ->
    results = JSON.parse(data.results)
    window.ResultHandler.insert(
      JSON.parse(results.pool), JSON.parse(results.dice)
    )

  _insertEmptyRoll: (data) ->
    @ROLL_INDEX_NODE.prepend @_renderRollRow(data)

  _popRoll: ->
    while @ROLL_INDEX_NODE.childElementCount > @MAX_INDEX_ROLLS
      @ROLL_INDEX_NODE.removeChild(@ROLL_INDEX_NODE.lastChild)

  _renderRollRow: (data) ->
    row = document.createElement('tr')
    row.innerHTML = @_renderRollRollContents(data)
    if data.dnr then row.classList.add('dnr')
    row

  _renderRollRollContents: (data) ->
    [
      '<td>' + data.roller + '</td>',
      '<td>' + window.Templates.purpose(data.purpose) + '</td>',
      '<td>' + Templates.dice_results + '</td>',
      '<td>' + Templates.pool_results + '</td>',
    ].join('')
}

document.addEventListener 'turbolinks:load', ->
  App.rolls.ROLL_INDEX_NODE =
    document.querySelectorAll('#rolls table tbody')[0]

@ROLLS_CHANNEL = App.rolls
