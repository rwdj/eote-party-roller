this.App = {};

App.cable = ActionCable.createConsumer();

App.dice_pools = App.cable.subscriptions.create('DicePoolsChannel', {
  DNR_SEQUENCE: /^<%= DicePool::DNR_SEQUENCE %>/,

  received: function(data) {
    const wasScrolledToBottom = this.isScrolledToBottom();
    $('#dice-pools').prepend(this.renderDicePool(data));

    if (!wasScrolledToBottom) window.scrollBy(0, 10000);
    return;
  },

  renderDicePool: function(data) {
    return [
      '<tr' + this.spoiler_line(data) + '>',
      '<td>' + data.roller + '</td>',
      '<td>' + data.purpose + '</td>',
      '<td>' + data.dice + '</td>',
      '<td>' + data.result + '</td>',
      '</tr>'
    ].join();
  },

  spoiler_line: function(data) {
    if (this.DNR_SEQUENCE.test(data.purpose)) {
      data.purpose = data.purpose.replace(this.DNR_SEQUENCE, '');
      return ' class="spoiler"';
    }
    return '';
  },

  isScrolledToBottom: function() {
    return window.scrollTop + $( window ).height() == this.getHeight(document);
  },

  getHeight: function(doc) {
    return Math.max(
        doc.body.scrollHeight, doc.documentElement.scrollHeight,
        doc.body.offsetHeight, doc.documentElement.offsetHeight,
        doc.body.clientHeight, doc.documentElement.clientHeight
    );
  },
});
